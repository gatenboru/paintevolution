/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import java.awt.Image;
import java.awt.Toolkit;

/**
 *
 * @author proyectosbeta
 */
public class VentanaImprimirImagenEstatica extends javax.swing.JFrame{
    ////////////////////////////////////////////////////////////////////////////
    // Variables de clase.
    ////////////////////////////////////////////////////////////////////////////
    private PanelDibujoImagenEstatica panelDibujoImagenEstatica;
    private static String rutaImagenTemporal;
    
    /**
     * FALTA COMENTAR
     *
     * @since 1.6
     */
    private Toolkit toolKit;
    
    /*
     * El icono de la aplicacion.
     * @since 1.6
     */
    private Image iconoAplicacion;
    
    /**
     * Creates new form VentanaImprimirImagenEstatica
     */
    public VentanaImprimirImagenEstatica(String rutaImagenTemporal) {
        /*
         * Se guarda la ruta de la imagen temporal para luego usar,
         * al crear un Texto con registros de la base de datos.
         */
        VentanaImprimirImagenEstatica.rutaImagenTemporal = rutaImagenTemporal;
        
        initComponents();
        
        // Centrar la VentanaImprimirImagenEstatica.
        setLocationRelativeTo(null);

        // Deshabilitar la opcion de Maximizar ventana.
        setResizable(false);
        
        /*
         * Para que el canvas contenga 350 de ancho se tiene que poner la ventana
         * VentanaImprimirImagenEstatica a 487 de ancho. Para que el canvas contenga 700 de alto 
         * se tiene que poner la ventana VentanaImprimirImagenEstatica a 977 de alto. 
         */
        setSize(1075, 487);
        
        // Agregar el icono de la aplicacion.
        toolKit = Toolkit.getDefaultToolkit();
        iconoAplicacion = toolKit.getImage(getClass().getResource("/imagenes/iconos/paintEvolution.png"));
        this.setIconImage(iconoAplicacion);
        
        // Crea el objeto de Mesa de Dibujo.
        panelDibujoImagenEstatica = new PanelDibujoImagenEstatica(rutaImagenTemporal);
        
        /*
         * Establece un esquema para la mesa de dibujo y agrega a la
         * VentanaImprimirImagenEstatica.
         */ 
        getContentPane().add(panelDibujoImagenEstatica, java.awt.BorderLayout.CENTER);
        //setContentPane(panelDibujoTexto);

        pack();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelOpciones = new javax.swing.JPanel();
        jPanelTablaPosiciones = new javax.swing.JPanel();
        jPanelBotones = new javax.swing.JPanel();
        jButtonInsertarImagen = new javax.swing.JButton();
        jButtonImprimir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Imprimir imagenes");

        jPanelOpciones.setLayout(new java.awt.BorderLayout());

        jPanelTablaPosiciones.setPreferredSize(new java.awt.Dimension(300, 295));

        javax.swing.GroupLayout jPanelTablaPosicionesLayout = new javax.swing.GroupLayout(jPanelTablaPosiciones);
        jPanelTablaPosiciones.setLayout(jPanelTablaPosicionesLayout);
        jPanelTablaPosicionesLayout.setHorizontalGroup(
            jPanelTablaPosicionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
        jPanelTablaPosicionesLayout.setVerticalGroup(
            jPanelTablaPosicionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 295, Short.MAX_VALUE)
        );

        jPanelOpciones.add(jPanelTablaPosiciones, java.awt.BorderLayout.NORTH);

        jButtonInsertarImagen.setText("Imagen");
        jButtonInsertarImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInsertarImagenActionPerformed(evt);
            }
        });
        jPanelBotones.add(jButtonInsertarImagen);

        jButtonImprimir.setText("Imprimir");
        jButtonImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImprimirActionPerformed(evt);
            }
        });
        jPanelBotones.add(jButtonImprimir);

        jPanelOpciones.add(jPanelBotones, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanelOpciones, java.awt.BorderLayout.WEST);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonInsertarImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInsertarImagenActionPerformed
        // Busca una imagen para luego insertar en el panelDibujoTexto.
        panelDibujoImagenEstatica.abrirImagen();
    }//GEN-LAST:event_jButtonInsertarImagenActionPerformed

    private void jButtonImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImprimirActionPerformed
        panelDibujoImagenEstatica.prepararImagenesTemporales();
        
        // Se cierra VentanaImprimirImagenEstatica.
        //this.dispose();
    }//GEN-LAST:event_jButtonImprimirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaImprimirImagenEstatica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaImprimirImagenEstatica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaImprimirImagenEstatica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaImprimirImagenEstatica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new VentanaImprimirImagenEstatica(rutaImagenTemporal).setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonImprimir;
    private javax.swing.JButton jButtonInsertarImagen;
    private javax.swing.JPanel jPanelBotones;
    private javax.swing.JPanel jPanelOpciones;
    private javax.swing.JPanel jPanelTablaPosiciones;
    // End of variables declaration//GEN-END:variables
}
